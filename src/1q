use std::path::Path;
use std::ffi::OsStr;
use std::fs;
use std::io::Error;
struct Chip8 {
    memory: [u8; 4096],
    pc: u16,
    i: u16,
    stack: [u16; 16],
    sp: u16,
    delay_timer: u16,
    sound_timer: u16,
    opcode: u16,
    key: [u8; 16],
    v: [u8; 16],
    halt: u8,
    draw_flag: u8,
}

impl Chip8 {
    fn new() -> Self {
        Chip8 {
            memory: [0; 4096],
            pc: 0x200,
            i: 0,
            stack: [0; 16],
            sp: 0,
            delay_timer: 0,
            sound_timer: 0,
            opcode: 0,
            key: [0; 16],
            v: [0; 16],
            halt: 0,
            draw_flag: 1,

        }
    }

    fn emulate_cycle(&self) {
        let opcode = self.memory[self.pc as usize] <<  8 | self.memory[(self.pc+1) as usize];
    }
}


fn main() {
    println!("Hello, world!");

    let path: &Path = Path::new("Fishie.ch8");
    let rom = read_file(&path).unwrap();    

    let mut chip: Chip8 = Chip8::new();
    
   /* for i in rom.iter() {
        println!("{:#02x}", i);
    }*/

    load_program(&mut chip, rom);


}


fn read_file(path: &Path) -> Result<Vec<u8>, std::io::Error> {
    let res = fs::read(path);

    res
}

fn load_program(s: &mut Chip8, rom: Vec<u8>){
    for i in 0..rom.len() {
        s.memory[(i+0x200) as usize] = rom[i];
    }

    for i in 0x200..0x400 {
        println!("{:?}", s.memory[i]);
    }
    
 
}
